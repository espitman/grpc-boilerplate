package main

import (
    {{- if .DB.PostgreSQL }}
	{{- end }}
	{{- if .HTTP }}
	"{{.Module}}/cmd/api"
	{{- end }}
	{{- if .GRPC }}
	"{{.Module}}/cmd/gRPC"
	{{- end }}
	{{- if .DB.MongoDB }}
    "{{.Module}}/internal/adapter/database/mongodb"
    {{- end }}
	{{- if .DB.PostgreSQL }}
	"{{.Module}}/internal/adapter/database/postgres/pg"
	{{- end }}
	"{{.Module}}/internal/core/service"
	validatorutil "git.alibaba.ir/taraaz/salvation2/monorepo/pkg/util/validator"
	superConf "github.com/espitman/go-super-conf"
)

func main() {
	validate := validatorutil.NewValidator()

	{{- if .DB.PostgreSQL }}
    dsn := superConf.Get("db.postgres.dsn")
    pgDB := pg.NewDB(dsn)
    {{- end }}

    {{- if .DB.MongoDB }}
    mongoURI := superConf.Get("db.mongodb.uri")
    mgDB := mongodb.NewDB(mongoURI)
    {{- end }}

    {{- if .DB.PostgreSQL }}
    {{.Domain}}RepositoryPg := pg.New{{.Domain|Upper}}Repository(pgDB.Client)
    {{- end }}
    {{- if .DB.MongoDB }}
    {{.Domain}}RepositoryMongo := mongodb.New{{.Domain|Upper}}Repository(mgDB.Client, superConf.Get("db.mongodb.database"))
    {{- end }}
    {{.Domain}}Service := service.New{{.Domain|Upper}}Service(
        {{- if .DB.PostgreSQL }}
        {{.Domain}}RepositoryPg,
        {{- end }}
        {{- if .DB.MongoDB }}
        {{.Domain}}RepositoryMongo,
        {{- end }}
    )

    // +salvation NewRepository

	{{- if .GRPC }}
    {{- if .HTTP }}
    go gRPC.Run(
    validate,
        {{.Domain}}Service,
        // +salvation RunServiceGRPC
    )
    {{- else}}
    gRPC.Run(
        validate,
        {{.Domain}}Service,
        // +salvation RunServiceGRPC
    )
    {{- end }}
    {{- end }}
    {{- if .HTTP }}
	api.Run(
	    validate,
	    {{.Domain}}Service,
	    // +salvation RunServiceAPI
	)
	{{- end }}
}
