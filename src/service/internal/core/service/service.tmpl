package service

import (
	"context"
	"{{.Service.Module}}/internal/core/domain"
	"{{.Service.Module}}/internal/core/port"
)

/**
 * {{.Name|Upper}}Service implements port.{{.Name|Upper}}Service interface
 */

type {{.Name|Upper}}Service struct {
	{{.Name}}RepositoryPg port.{{.Name|Upper}}RepositoryPg
	{{.Name}}RepositoryMongo port.{{.Name|Upper}}RepositoryMongo
}

func New{{.Name|Upper}}Service(
    {{.Name}}RepositoryPg port.{{.Name|Upper}}RepositoryPg,
    {{.Name}}RepositoryMongo port.{{.Name|Upper}}RepositoryMongo,
    ) *{{.Name|Upper}}Service {
	return &{{.Name|Upper}}Service{
		{{.Name}}RepositoryPg: {{.Name}}RepositoryPg,
		{{.Name}}RepositoryMongo: {{.Name}}RepositoryMongo,
	}
}

func (s *{{.Name|Upper}}Service) Crete(ctx context.Context, {{.Name}} domain.{{.Name|Upper}}) (*domain.{{.Name|Upper}}, error) {
	mongo{{.Name|Upper}}, _ := s.{{.Name}}RepositoryMongo.Crete(ctx, {{.Name}})
    result, err := s.{{.Name}}RepositoryPg.Crete(ctx, {{.Name}})
    if err != nil {
        return nil, err
    }
    result.MongoID = mongo{{.Name|Upper}}.MongoID
    return result, nil
}

func (s *{{.Name|Upper}}Service) Get(ctx context.Context, ID int) (*domain.{{.Name|Upper}}, error) {
	return s.{{.Name}}RepositoryPg.Get(ctx, ID)
}

func (s *{{.Name|Upper}}Service) Update(ctx context.Context, ID int, {{.Name}} domain.{{.Name|Upper}}) (*domain.{{.Name|Upper}}, error) {
	return s.{{.Name}}RepositoryPg.Update(ctx, ID, {{.Name}})
}

func (s *{{.Name|Upper}}Service) Delete(ctx context.Context, ID int) (*domain.{{.Name|Upper}}, error) {
	return s.{{.Name}}RepositoryPg.Delete(ctx, ID)
}
