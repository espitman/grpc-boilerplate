package db

import (
	"context"
	"{{.Module}}/internal/adapter/database/postgres/ent"
	"{{.Module}}/internal/core/domain"
)

type contextKey string

const (
	transactionKey contextKey = "tx"
)

type {{.Domain|Upper}}Repository struct {
	client *ent.Client
}

/**
 * {{.Domain}}Repository implements port.{{.Domain}}Repository interface
 */

func New{{.Domain|Upper}}Repository(client *ent.Client) *{{.Domain|Upper}}Repository {
	return &{{.Domain|Upper}}Repository{
		client: client,
	}
}

func (r *{{.Domain|Upper}}Repository) Crete(ctx context.Context, d domain.{{.Domain|Upper}}) (*domain.{{.Domain|Upper}}, error) {
	newD, err := r.client.{{.Domain|Upper}}.
		Create().
		SetName(d.Name).
		Save(ctx)
	if err != nil {
		return nil, err
	}
	return {{.Domain}}SchemaTo{{.Domain|Upper}}DomainPointerMapper(newD), nil

}


func (r *{{.Domain|Upper}}Repository) Get(ctx context.Context, ID int) (*domain.{{.Domain|Upper}}, error) {
	u, err := r.client.{{.Domain|Upper}}.Get(ctx, ID)
	if err != nil {
		return nil, err
	}
	return {{.Domain}}SchemaTo{{.Domain|Upper}}DomainPointerMapper(u), nil
}